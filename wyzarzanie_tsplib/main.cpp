#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <sstream>

std::vector<std::vector<int>> macierzOdleglosci(int n) {
    std::vector<std::vector<int>> odleglosci(n, std::vector<int>(n));
    switch(n) {
        case 5:
            odleglosci = {
                    {0, 25, 41, 66, 30},
                    {25, 0, 25, 41, 66},
                    {41, 25, 0, 25, 41},
                    {66, 41, 25, 0, 25},
                    {30, 66, 41, 25, 0}
            };
            break;
        case 7:
            odleglosci = {
                    {0, 25, 41, 66, 30, 37, 72},
                    {25, 0, 25, 41, 66, 30, 37},
                    {41, 25, 0, 25, 41, 66, 30},
                    {66, 41, 25, 0, 25, 41, 66},
                    {30, 66, 41, 25, 0, 25, 41},
                    {37, 30, 66, 41, 25, 0, 25},
                    {72, 37, 30, 66, 41, 25, 0}
            };
            break;
        case 9:
            odleglosci = {
                    {0, 25, 41, 66, 30, 37, 72, 81, 54},
                    {25, 0, 25, 41, 66, 30, 37, 72, 81},
                    {41, 25, 0, 25, 41, 66, 30, 37, 72},
                    {66, 41, 25, 0, 25, 41, 66, 30, 37},
                    {30, 66, 41, 25, 0, 25, 41, 66, 30},
                    {37, 30, 66, 41, 25, 0, 25, 41, 66},
                    {72, 37, 30, 66, 41, 25, 0, 25, 41},
                    {81, 72, 37, 30, 66, 41, 25, 0, 25},
                    {54, 81, 72, 37, 30, 66, 41, 25, 0}
            };
            break;
        case 10:
            odleglosci = {
                    {0, 25, 41, 66, 30, 37, 72, 81, 54, 12},
                    {25, 0, 25, 41, 66, 30, 37, 72, 81, 54},
                    {41, 25, 0, 25, 41, 66, 30, 37, 72, 81},
                    {66, 41, 25, 0, 25, 41, 66, 30, 37, 72},
                    {30, 66, 41, 25, 0, 25, 41, 66, 30, 37},
                    {37, 30, 66, 41, 25, 0, 25, 41, 66, 30},
                    {72, 37, 30, 66, 41, 25, 0, 25, 41, 66},
                    {81, 72, 37, 30, 66, 41, 25, 0, 25, 41},
                    {54, 81, 72, 37, 30, 66, 41, 25, 0, 25},
                    {12, 54, 81, 72, 37, 30, 66, 41, 25, 0}
            };
            break;
        case 11:
            odleglosci = {
                    {0, 25, 41, 66, 30, 37, 72, 81, 54, 12, 93},
                    {25, 0, 25, 41, 66, 30, 37, 72, 81, 54, 12},
                    {41, 25, 0, 25, 41, 66, 30, 37, 72, 81, 54},
                    {66, 41, 25, 0, 25, 41, 66, 30, 37, 72, 81},
                    {30, 66, 41, 25, 0, 25, 41, 66, 30, 37, 72},
                    {37, 30, 66, 41, 25, 0, 25, 41, 66, 30, 37},
                    {72, 37, 30, 66, 41, 25, 0, 25, 41, 66, 30},
                    {81, 72, 37, 30, 66, 41, 25, 0, 25, 41, 66},
                    {54, 81, 72, 37, 30, 66, 41, 25, 0, 25, 41},
                    {12, 54, 81, 72, 37, 30, 66, 41, 25, 0, 25},
                    {93, 12, 54, 81, 72, 37, 30, 66, 41, 25, 0}
            };
            break;
        case 29:
            odleglosci = {
                    {0, 107, 241, 190, 124, 80, 316, 76, 152, 157, 283, 133, 113, 297, 228, 129, 348, 276, 188, 150, 65, 341, 184, 67, 221, 169, 108, 45, 167},
                    {107, 0, 148, 137, 88, 127, 336, 183, 134, 95, 254, 180, 101, 234, 175, 176, 265, 199, 182, 67, 42, 278, 271, 146, 251, 105, 191, 139, 79},
                    {241, 148, 0, 374, 171, 259, 509, 317, 217, 232, 491, 312, 280, 391, 412, 349, 422, 356, 355, 204, 182, 435, 417, 292, 424, 116, 337, 273, 77},
                    {190, 137, 374, 0, 202, 234, 222, 192, 248, 42, 117, 287, 79, 107, 38, 121, 152, 86, 68, 70, 137, 151, 239, 135, 137, 242, 165, 228, 205},
                    {124, 88, 171, 202, 0, 61, 392, 202, 46, 160, 319, 112, 163, 322, 240, 232, 314, 287, 238, 155, 65, 366, 300, 175, 307, 57, 220, 121, 97},
                    {80, 127, 259, 234, 61, 0, 386, 141, 72, 167, 351, 55, 157, 331, 272, 226, 362, 296, 232, 164, 85, 375, 249, 147, 301, 118, 188, 60, 185},
                    {316, 336, 509, 222, 392, 386, 0, 233, 438, 254, 202, 439, 235, 254, 210, 187, 313, 266, 154, 282, 321, 298, 168, 249, 95, 437, 190, 314, 435},
                    {76, 183, 317, 192, 202, 141, 233, 0, 213, 188, 272, 193, 131, 302, 233, 98, 344, 289, 177, 216, 141, 346, 108, 57, 190, 245, 43, 81, 243},
                    {152, 134, 217, 248, 46, 72, 438, 213, 0, 206, 365, 89, 209, 368, 286, 278, 360, 333, 284, 201, 111, 412, 321, 221, 353, 72, 266, 132, 111},
                    {157, 95, 232, 42, 160, 167, 254, 188, 206, 0, 159, 220, 57, 149, 80, 132, 193, 127, 100, 28, 95, 193, 241, 131, 169, 200, 161, 189, 163},
                    {283, 254, 491, 117, 319, 351, 202, 272, 365, 159, 0, 404, 176, 106, 79, 161, 165, 141, 95, 187, 254, 103, 279, 215, 117, 359, 216, 308, 322},
                    {133, 180, 312, 287, 112, 55, 439, 193, 89, 220, 404, 0, 210, 384, 325, 279, 415, 349, 285, 217, 138, 428, 310, 200, 354, 169, 241, 112, 238},
                    {113, 101, 280, 79, 163, 157, 235, 131, 209, 57, 176, 210, 0, 186, 117, 75, 231, 165, 81, 85, 92, 230, 184, 74, 150, 208, 104, 158, 206},
                    {297, 234, 391, 107, 322, 331, 254, 302, 368, 149, 106, 384, 186, 0, 69, 191, 59, 35, 125, 167, 255, 44, 309, 245, 169, 327, 246, 335, 288},
                    {228, 175, 412, 38, 240, 272, 210, 233, 286, 80, 79, 325, 117, 69, 0, 122, 122, 56, 56, 108, 175, 113, 240, 176, 125, 280, 177, 266, 243},
                    {129, 176, 349, 121, 232, 226, 187, 98, 278, 132, 161, 279, 75, 191, 122, 0, 244, 178, 66, 160, 161, 235, 118, 62, 92, 277, 55, 155, 275},
                    {348, 265, 422, 152, 314, 362, 313, 344, 360, 193, 165, 415, 231, 59, 122, 244, 0, 66, 178, 198, 286, 77, 362, 287, 228, 358, 299, 380, 319},
                    {276, 199, 356, 86, 287, 296, 266, 289, 333, 127, 141, 349, 165, 35, 56, 178, 66, 0, 112, 132, 220, 79, 296, 232, 181, 292, 233, 314, 253},
                    {188, 182, 355, 68, 238, 232, 154, 177, 284, 100, 95, 285, 81, 125, 56, 66, 178, 112, 0, 128, 167, 169, 179, 120, 69, 283, 121, 213, 281},
                    {150, 67, 204, 70, 155, 164, 282, 216, 201, 28, 187, 217, 85, 167, 108, 160, 198, 132, 128, 0, 88, 211, 269, 159, 197, 172, 189, 182, 135},
                    {65, 42, 182, 137, 65, 85, 321, 141, 111, 95, 254, 138, 92, 255, 175, 161, 286, 220, 167, 88, 0, 299, 229, 104, 236, 110, 149, 97, 108},
                    {341, 278, 435, 151, 366, 375, 298, 346, 412, 193, 103, 428, 230, 44, 113, 235, 77, 79, 169, 211, 299, 0, 353, 289, 213, 371, 290, 379, 332},
                    {184, 271, 417, 239, 300, 249, 168, 108, 321, 241, 279, 310, 184, 309, 240, 118, 362, 296, 179, 269, 229, 353, 0, 121, 162, 345, 80, 189, 342},
                    {67, 146, 292, 135, 175, 147, 249, 57, 221, 131, 215, 200, 74, 245, 176, 62, 287, 232, 120, 159, 104, 289, 121, 0, 154, 220, 41, 93, 218},
                    {221, 251, 424, 137, 307, 301, 95, 190, 353, 169, 117, 354, 150, 169, 125, 92, 228, 181, 69, 197, 236, 213, 162, 154, 0, 352, 147, 247, 350},
                    {169, 105, 116, 242, 57, 118, 437, 245, 72, 200, 359, 169, 208, 327, 280, 277, 358, 292, 283, 172, 110, 371, 345, 220, 352, 39, 263, 178, 39},
                    {108, 191, 337, 165, 220, 188, 190, 43, 266, 161, 216, 241, 104, 246, 177, 55, 299, 233, 121, 189, 149, 290, 80, 41, 147, 265, 0, 124, 263},
                    {45, 139, 273, 228, 121, 60, 314, 81, 132, 189, 308, 112, 158, 335, 266, 155, 380, 314, 213, 182, 97, 379, 189, 93, 247, 178, 124, 0, 199},
                    {167, 79, 77, 205, 97, 185, 435, 243, 111, 163, 322, 238, 206, 288, 243, 275, 319, 253, 281, 135, 108, 332, 342, 218, 350, 39, 263, 199, 0}
            };
            break;
    }
    return odleglosci;
}



struct Wierzcholek {
    int x, y;
};

std::vector<std::vector<double>> generujSymetrycznaMacierzOdleglosci(const std::vector<Wierzcholek>& wspolrzedne) {
    int n = wspolrzedne.size();
    std::vector<std::vector<double>> macierz(n, std::vector<double>(n, 0.0));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i != j) {
                double odleglosc = std::hypot(wspolrzedne[j].x - wspolrzedne[i].x, wspolrzedne[j].y - wspolrzedne[i].y);
                macierz[i][j] = odleglosc;
                macierz[j][i] = odleglosc;  // Symetryczna macierz
            }
        }
    }

    return macierz;
}





std::vector<std::vector<int>> generujPermutacje(std::vector<int> vec, int poz = 0) {
    std::vector<std::vector<int>> permutatacje;
    if (poz != vec.size()) {
        for (int i = poz; i < vec.size(); ++i) {
            std::swap(vec[i], vec[poz]);
            std::vector<std::vector<int>> podpermutacje = generujPermutacje(vec, poz + 1);
            permutatacje.insert(permutatacje.end(), podpermutacje.begin(), podpermutacje.end());
            std::swap(vec[i], vec[poz]);
        }
    } else {
        permutatacje.push_back(vec);
    }
    return permutatacje;
}

int obliczDlugosc(const std::vector<double>& permutatacja, const std::vector<std::vector<double>>& odleglosci) {
    int dlugosc = 0;
    for (int i = 0; i < permutatacja.size() - 1; ++i) {
        dlugosc += odleglosci[permutatacja[i]][permutatacja[i + 1]];
    }
    dlugosc += odleglosci[permutatacja.back()][permutatacja.front()];
    return dlugosc;
}




std::vector<double> simulatedAnnealing(const std::vector<std::vector<double>>& odleglosci, double initialTemperature, double coolingRate, int maxIterations) {
    int n = odleglosci.size();
    std::vector<double> currentSolution(n);
    for (int i = 0; i < n; ++i) {
        currentSolution[i] = i;
    }
    std::random_shuffle(currentSolution.begin(), currentSolution.end());

    std::vector<double> bestSolution = currentSolution;

    double currentTemperature = initialTemperature;

    for (int iteration = 0; iteration < maxIterations; ++iteration) {
        std::vector<double> newSolution = currentSolution;
        int city1 = rand() % n;
        int city2 = rand() % n;

        // Zamień miasta w trasie
        std::swap(newSolution[city1], newSolution[city2]);

        // Oblicz różnicę w długości tras
        int currentLength = obliczDlugosc(currentSolution, odleglosci);
        int newLength = obliczDlugosc(newSolution, odleglosci);
        int lengthDifference = newLength - currentLength;

        // Jeśli nowe rozwiązanie jest lepsze, zaakceptuj je
        if (lengthDifference < 0 || (rand() / (RAND_MAX + 1.0)) < std::exp(-lengthDifference / currentTemperature)) {
            currentSolution = newSolution;

            // Zaktualizuj najlepsze rozwiązanie
            if (newLength < obliczDlugosc(bestSolution, odleglosci)) {
                bestSolution = newSolution;
            }
        }

        // Schładzanie
        currentTemperature *= coolingRate;
    }

    return bestSolution;
}

int main() {
        int najkrotszaDrogaBF = 1000000;

    std::vector<Wierzcholek> wspolrzedne_kroA200 = {
            {1357, 1905},
            {2650, 802},
            {1774, 107},
            {1307, 964},
            {3806, 746},
            {2687, 1353},
            {43, 1957},
            {3092, 1668},
            {185, 1542},
            {834, 629},
            {40, 462},
            {1183, 1391},
            {2048, 1628},
            {1097, 643},
            {1838, 1732},
            {234, 1118},
            {3314, 1881},
            {737, 1285},
            {779, 777},
            {2312, 1949},
            {2576, 189},
            {3078, 1541},
            {2781, 478},
            {705, 1812},
            {3409, 1917},
            {323, 1714},
            {1660, 1556},
            {3729, 1188},
            {693, 1383},
            {2361, 640},
            {2433, 1538},
            {554, 1825},
            {913, 317},
            {3586, 1909},
            {2636, 727},
            {1000, 457},
            {482, 1337},
            {3704, 1082},
            {3635, 1174},
            {1362, 1526},
            {2049, 417},
            {2552, 1909},
            {3939, 640},
            {219, 898},
            {812, 351},
            {901, 1552},
            {2513, 1572},
            {242, 584},
            {826, 1226},
            {3278, 799},
            {86, 1065},
            {14, 454},
            {1327, 1893},
            {2773, 1286},
            {2469, 1838},
            {3835, 963},
            {1031, 428},
            {3853, 1712},
            {1868, 197},
            {1544, 863},
            {457, 1607},
            {3174, 1064},
            {192, 1004},
            {2318, 1925},
            {2232, 1374},
            {396, 828},
            {2365, 1649},
            {2499, 658},
            {1410, 307},
            {2990, 214},
            {3646, 1018},
            {3394, 1028},
            {1779, 90},
            {1058, 372},
            {2933, 1459},
            {3099, 173},
            {2178, 978},
            {138, 1610},
            {2082, 1753},
            {2302, 1127},
            {805, 272},
            {22, 1617},
            {3213, 1085},
            {99, 536},
            {1533, 1780},
            {3564, 676},
            {29, 6},
            {3808, 1375},
            {2221, 291},
            {3499, 1885},
            {3124, 408},
            {781, 671},
            {1027, 1041},
            {3249, 378},
            {3297, 491},
            {213, 220},
            {721, 186},
            {3736, 1542},
            {868, 731},
            {960, 303},
            {1380, 939},
            {2848, 96},
            {3510, 1671},
            {457, 334},
            {3888, 666},
            {984, 965},
            {2721, 1482},
            {1286, 525},
            {2716, 1432},
            {738, 1325},
            {1251, 1832},
            {2728, 1698},
            {3815, 169},
            {3683, 1533},
            {1247, 1945},
            {123, 862},
            {1234, 1946},
            {252, 1240},
            {611, 673},
            {2576, 1676},
            {928, 1700},
            {53, 857},
            {1807, 1711},
            {274, 1420},
            {2574, 946},
            {178, 24},
            {2678, 1825},
            {1795, 962},
            {3384, 1498},
            {3520, 1079},
            {1256, 61},
            {1424, 1728},
            {3913, 192},
            {3085, 1528},
            {2573, 1969},
            {463, 1670},
            {3875, 598},
            {298, 1513},
            {3479, 821},
            {2542, 236},
            {3955, 1743},
            {1323, 280},
            {3447, 1830},
            {2936, 337},
            {1621, 1830},
            {3373, 1646},
            {1393, 1368},
            {3874, 1318},
            {938, 955},
            {3022, 474},
            {2482, 1183},
            {3854, 923},
            {376, 825},
            {2519, 135},
            {2945, 1622},
            {953, 268},
            {2628, 1479},
            {2097, 981},
            {890, 1846},
            {2139, 1806},
            {2421, 1007},
            {2290, 1810},
            {1115, 1052},
            {2588, 302},
            {327, 265},
            {241, 341},
            {1917, 687},
            {2991, 792},
            {2573, 599},
            {19, 674},
            {3911, 1673},
            {872, 1559},
            {2863, 558},
            {929, 1766},
            {839, 620},
            {3893, 102},
            {2178, 1619},
            {3822, 899},
            {378, 1048},
            {1178, 100},
            {2599, 901},
            {3416, 143},
            {2961, 1605},
            {611, 1384},
            {3113, 885},
            {2597, 1830},
            {2586, 1286},
            {161, 906},
            {1429, 134},
            {742, 1025},
            {1625, 1651},
            {1187, 706},
            {1787, 1009},
            {22, 987},
            {3640, 43},
            {3756, 882},
            {776, 392},
            {1724, 1642},
            {198, 1810},
            {3950, 1558}
    };


    std::vector<Wierzcholek> wspolrzedne_kroA100 = {
            {1380, 939},
            {2848, 96},
            {3510, 1671},
            {457, 334},
            {3888, 666},
            {984, 965},
            {2721, 1482},
            {1286, 525},
            {2716, 1432},
            {738, 1325},
            {1251, 1832},
            {2728, 1698},
            {3815, 169},
            {3683, 1533},
            {1247, 1945},
            {123, 862},
            {1234, 1946},
            {252, 1240},
            {611, 673},
            {2576, 1676},
            {928, 1700},
            {53, 857},
            {1807, 1711},
            {274, 1420},
            {2574, 946},
            {178, 24},
            {2678, 1825},
            {1795, 962},
            {3384, 1498},
            {3520, 1079},
            {1256, 61},
            {1424, 1728},
            {3913, 192},
            {3085, 1528},
            {2573, 1969},
            {463, 1670},
            {3875, 598},
            {298, 1513},
            {3479, 821},
            {2542, 236},
            {3955, 1743},
            {1323, 280},
            {3447, 1830},
            {2936, 337},
            {1621, 1830},
            {3373, 1646},
            {1393, 1368},
            {3874, 1318},
            {938, 955},
            {3022, 474},
            {2482, 1183},
            {3854, 923},
            {376, 825},
            {2519, 135},
            {2945, 1622},
            {953, 268},
            {2628, 1479},
            {2097, 981},
            {890, 1846},
            {2139, 1806},
            {2421, 1007},
            {2290, 1810},
            {1115, 1052},
            {2588, 302},
            {327, 265},
            {241, 341},
            {1917, 687},
            {2991, 792},
            {2573, 599},
            {19, 674},
            {3911, 1673},
            {872, 1559},
            {2863, 558},
            {929, 1766},
            {839, 620},
            {3893, 102},
            {2178, 1619},
            {3822, 899},
            {378, 1048},
            {1178, 100},
            {2599, 901},
            {3416, 143},
            {2961, 1605},
            {611, 1384},
            {3113, 885},
            {2597, 1830},
            {2586, 1286},
            {161, 906},
            {1429, 134},
            {742, 1025},
            {1625, 1651},
            {1187, 706},
            {1787, 1009},
            {22, 987},
            {3640, 43},
            {3756, 882},
            {776, 392},
            {1724, 1642},
            {198, 1810},
            {3950, 1558}
    };



        std::vector<std::vector<double>> odleglosci = generujSymetrycznaMacierzOdleglosci(wspolrzedne_kroA100);

        std::chrono::microseconds totalElapsedTime(0);
        std::chrono::microseconds maxElapsedTime(0);

        // Symulowane Wyżarzanie
        auto startTimeSA = std::chrono::high_resolution_clock::now();
        std::vector<double> saSolution = simulatedAnnealing(odleglosci, 1000.0, 0.99, 10000);
        auto endTimeSA = std::chrono::high_resolution_clock::now();
        auto elapsedTimeSA = std::chrono::duration_cast<std::chrono::microseconds>(endTimeSA - startTimeSA);
        totalElapsedTime += elapsedTimeSA;
        if (elapsedTimeSA > maxElapsedTime) {
            maxElapsedTime = elapsedTimeSA;
        }

        //std::cout << "Czas Symulowanego Wyzarzania: " << elapsedTimeSA.count() << " us" << std::endl;
        std::cout << "Sredni czas Symulowanego Wyzarzania: " << totalElapsedTime.count() / 5.0 << " us" << std::endl;
        std::cout << "Maksymalny czas Symulowanego Wyzarzania: " << maxElapsedTime.count() << " us" << std::endl;
        std::cout << "Dlugosc trasy Symulowanego Wyzarzania: " << obliczDlugosc(saSolution, odleglosci) << std::endl << std::endl;


    return 0;
}
